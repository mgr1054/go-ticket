{
    "swagger": "2.0",
    "info": {
        "description": "This is a basic ticket service written in go.",
        "title": "Go-Ticket API",
        "contact": {
            "name": "Max Gre√ü",
            "url": "https://github.com/mgr1054/go-ticket",
            "email": "max.gress@student.reutlingen-university.de"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/": {
            "get": {
                "description": "Sends alive",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Get Health",
                "operationId": "get-health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/secured/events": {
            "get": {
                "description": "Sends Array Of Events\nallowed: user, admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get All Events",
                "operationId": "get-events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Event"
                            }
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"Could not get events\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new Event\nallowed: admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create Event",
                "operationId": "create-event",
                "parameters": [
                    {
                        "description": "Create Event",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.NewEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Event"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"Could not create Event\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"Could not create Event\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secured/events/{date}": {
            "get": {
                "description": "Sends Events for a Date\nallowed: user, admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get Event By Date",
                "operationId": "get-event-by-date",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Event"
                            }
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"Event not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secured/events/{id}": {
            "get": {
                "description": "Sends a Event with ID\nallowed: user, admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get Event By ID",
                "operationId": "get-event-by-id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Event"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"Event not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates Event with given ID\nallowed: admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update Event By ID",
                "operationId": "update-event-by-id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Event"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"Event could not be updated with provided data\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"Event not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"Could not update Event\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes Event with given ID\nallowed: admin",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete Event By ID",
                "operationId": "delete-event-by-id",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Event deleted\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"Event not found!\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"Could not create Event\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secured/events/{location}": {
            "get": {
                "description": "Sends Events for a Location\nallowed: user, admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get Event By Location",
                "operationId": "get-event-by-location",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Event"
                            }
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"Event not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secured/tickets/events/{id}": {
            "get": {
                "description": "Gives back a number of all sold tickets for this event\nallowed: admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Get Tickets By EventID",
                "operationId": "get-tickets-by-event-id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Event"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"Tickets not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secured/tickets/user/{id}": {
            "get": {
                "description": "Gives back all tickets for user\nallowed: admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Get Tickets By UserID",
                "operationId": "get-tickets-by-user-id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secured/tickets/{id}": {
            "get": {
                "description": "Creates Ticket for EventID, also checks if enough capacity is available\nallowed: user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Create Ticket by EventID",
                "operationId": "create-ticket",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"User not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"Could not create Ticket\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes Ticket by Ticket ID, available up until one week before the event\nallowed: admin, user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tickets"
                ],
                "summary": "Delete Ticket By ID",
                "operationId": "delete-tickets-by-user-id",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Ticket deleted\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"Tickets not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"Could not parse time\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/secured/user/{id}": {
            "get": {
                "description": "Sends a User with ID\nallowed:  admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get User By ID",
                "operationId": "get-user-by-id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"User not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates User with Body and corresponding ID\nallowed:  admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update User By ID",
                "operationId": "update-user-by-id",
                "parameters": [
                    {
                        "description": "Update User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"User not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deltes User with corresponding ID\nallowed:  admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete User By ID",
                "operationId": "delete-user-by-id",
                "responses": {
                    "200": {
                        "description": "{\"message\": \"User deleted\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "{\"error\":\"Unauthorized for this route\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"User not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "description": "Generates JWT Token based on given context, checks if username and password match\nEncode JWT with username, email and role\nallowed: unsecured",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Generate Token",
                "operationId": "generate-token",
                "parameters": [
                    {
                        "description": "Create Token",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"Could not create Token\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"Password incorrect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "{\"error\":\"User not found\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "{\"error\":\"Could not create Token\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Creates new User, hashes Password for DB\nrole automatically set to user\nallowed: unsecured",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register User",
                "operationId": "register-user",
                "parameters": [
                    {
                        "description": "Create User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.NewEvent": {
            "type": "object",
            "required": [
                "band_name",
                "capacity",
                "date",
                "location",
                "price"
            ],
            "properties": {
                "band_name": {
                    "type": "string",
                    "example": "Deichkind"
                },
                "capacity": {
                    "type": "integer",
                    "example": 35000
                },
                "date": {
                    "type": "string",
                    "example": "2022-10-11"
                },
                "location": {
                    "type": "string",
                    "example": "Olympiastadion"
                },
                "price": {
                    "type": "string",
                    "example": "55"
                }
            }
        },
        "controller.TokenRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@online.de"
                },
                "password": {
                    "type": "string",
                    "example": "1234"
                }
            }
        },
        "controller.UserUpdate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "mgr@online.de"
                },
                "name": {
                    "type": "string",
                    "example": "Max"
                },
                "password": {
                    "type": "string",
                    "example": "1234"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "username": {
                    "type": "string",
                    "example": "mgr"
                }
            }
        },
        "models.Event": {
            "type": "object",
            "properties": {
                "band_name": {
                    "type": "string"
                },
                "capacity": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                }
            }
        },
        "models.Ticket": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "price": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}